server dependecies:

-express
-jsonwebtoken
-dotenv
-mongoose
-express-async-handler
-morgan
-bcryptjs


__dirname
import * as url from 'url';
const __filename = url.fileURLToPath(import.meta.url);
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));\


Controller

To-do

Protecxxt the ability of a user making an event for someone else aka the host ✅

Create get sinmgle event controller ✅

create get single user controller ✅

make sure users cannot follow themselves ✅

!!!! Contreoller gettinmg out of hand, taker time asap to abstract responsibiltiies into seperate controllers !!!

Create Controller for a user to mark attendance status for an event, either Going or Maybe ✅
Create Controller to delete a users attendance status from an event✅
Create a controller to update event activityDetails ✅
Create a controller to delete an event 

NOTES ON EVENT DELETION:
1. Validate 
2. Prevent the ability for users to delete events they did not create
3. When a deletion is succesful, make sure you delete the event in every users attendance array.
This might bring the need for notifications to inform users about the event deletion/cancellation
4. Event models should have a status property: "Active", "Passed" "Cancelled", deleting an event will set the status to "Cancelled" which will obscure it from the public. 




Complete:

Get All Events Based on Areas a User Follows
Get All Events Created by Users a user Follows
Get Activity of all following and sorted by most recent
Users can follow other users






SIMULATION OF HOW TO REPLACE FOLLOWING ACTIVITY USER/EVENT ID REFS WITH DISPLAY NAMES

const data = "63b7cec80129e3cfab4f4ed5 created a new event called 63b93ef0083cb56fe6d96194"

const user = '63b7cec80129e3cfab4f4ed5'
const userReplacement = "david"
const event = '63b93ef0083cb56fe6d96194'
const eventReplacement = "david's event"

const formatted = data.replace(user, userReplacement).replace(event, eventReplacement)



VANILLA JS WAY TO CREATE DYNAMIC MARKUP BASED ON ACTIVITY ARRAY
fetch('http://localhost:5000/api/users/activity', {
  
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer ' + 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzYjk0ZGVhODY3NDliNmI1MGM4NzI4NiIsImlhdCI6MTY3MzA4ODcxMSwiZXhwIjoxNjc1NjgwNzExfQ.ZPe1lyNLk40LtiM4uZKOYv5Hle8okZZXz1_W4zVArG4'
  },

}).then(res => res.json())
.then(activityArray => {
  console.log(activityArray)
  activityArray.forEach(a => {

    if(a.activityType === 'Event Creation'){
      const markup = `<a href="/api/users/${a.user._id}">${a.user.username}</a> created an event called <a href="/api/events/${a.event._id}">${a.event.title}</a>`
      const li = document.createElement('li')
      li.innerHTML = markup
      document.querySelector('ul').appendChild(li)
    }
    if(a.activityType === 'Follow'){
      const markup = `<a href="/api/users/${a.user._id}">${a.user.username}</a> followed <a href="/api/users/${a.followed._id}">${a.followed.username}</a>`
      const li = document.createElement('li')
      li.innerHTML = markup
      document.querySelector('ul').appendChild(li)
    }
  })
})



